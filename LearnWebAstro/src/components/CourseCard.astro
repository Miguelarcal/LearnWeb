---
import { averageCourseScore, customEndpointJwt } from '@api/useCases';
import { formatISODateAuto } from '@utils/formatDate';
import { formatFloat } from '@utils/formatFloat';

interface Props {
	id: Number; // id del curso
	name: string; // nombre del curso
	description: string; // descripción
	rating: string; // puntuación media
	ratingCount: string; // cantidad de puntuaciones
	author: string; // autor del curso
	hidden: Number; // si está oculto o no
	user_id: string; // id del usuario, para comprobaciones de acceso
	user_role: string; // rol del usuario, para comprobaciones de acceso
	add_date: string; // fecha de creación
	mod_date: string; // fecha de modificación
	difficulty: string; // dificultad
}

const { id, name, description, rating, ratingCount, author, hidden, user_role, user_id, add_date, mod_date, difficulty } = Astro.props;

const base_path = import.meta.env.BASE_URL;

const token = Astro.cookies.get("jwt_token")?.value;

const nick_author = await customEndpointJwt(author, token);

// Obtenemos la puntuación media si no es proporcionada en los props
const nPuntuation = (parseInt(ratingCount) > 0) ? ({'average_score': rating, 'score_count': ratingCount}) : await averageCourseScore(id, token);

let level = 'Principiante';

switch (difficulty) {
	case 'begginer':
		level = 'Principiante';
		break;

	case 'intermediate':
		level = 'Intermedio';
		break;

	case 'advanced':
		level = 'Avanzado';
		break;

	default:
		break;
}
---
<li class="minicard">
	<article class="minicard-content">
		<header class="minicard-header">
			<h3>{name}</h3>
			<p class="minicard-description">{description}</p>
		</header>
		<footer class="minicard-footer">
			<div class="minicard-rating">
				<span class="minicard-rating-value">{(nPuntuation['score_count'] > 0) ? formatFloat(nPuntuation['average_score']) : <></>}</span>
				<span class="minicard-rating-count">{(nPuntuation['score_count'] > 0) ? nPuntuation['score_count'] : <></>} </span>
			</div>

			<div class="minicard-meta">
				<span class="minicard-author">Por {nick_author['nickname']}</span>
				<div class="minicard-dates">
					<span>Creado: {formatISODateAuto(add_date)}</span>
					{(formatISODateAuto(add_date) != formatISODateAuto(mod_date)) ? <span>Editado {formatISODateAuto(mod_date)}</span> : <></>}</span>
				</div>
				<span class="minicard-difficulty">{level}</span>
			</div>
		</footer>
		<div class="buttons">
			<!-- hide-course es una página "comodín" que realmente no mostramos como tal, pero al entrar en ella cambia el valor de hidden del curso -->
            {(user_role == "ROLE_ADMIN" || author == `/api/users/${user_id}`) ? <><a href={`${base_path}/hide-course?id=${id}`} class="action-button">{hidden == 0 ? <>Ocultar</> : <>Mostrar</>}</a></> : null}
            {(user_role == "ROLE_ADMIN" || author == `/api/users/${user_id}`) ? <><a href={`${base_path}/edit-course?id=${id}`} class="action-button">Editar</a></> : null}
            <a href={`${base_path}/see-course?id=${id}`} class="action-button">Ver</a>
        </div>
	</article>
</li>