---
import '@styles/seetutorial.css';
import { getTutorialById, averageTutorialScore, customEndpointJwt, checkUserBan } from '@api/useCases';
import { formatISODateAuto } from '@utils/formatDate';
import { formatFloat } from '@utils/formatFloat';
import { decodeToken } from '@utils/getToken.js';

interface Props {
    id: string;
    show_details: string;
}

const { id, show_details } = Astro.props;

const token = Astro.cookies.get("jwt_token")?.value;

// Cargar datos del tutorial
const tutorial = await getTutorialById(id, token);

// Obtener las p√°ginas del tutorial
const pages = await Promise.all(
    tutorial.pages.map(async (pageUrl) => {
        const page = await customEndpointJwt(pageUrl, token);
        // Obtener los bloques de cada p√°gina
        page.blocks = await Promise.all(
            page.blocks.map(async (blockUrl) => {
                return await customEndpointJwt(blockUrl, token);
            })
        );
        return page;
    })
);

const autor = await customEndpointJwt(tutorial.author, token);

const avg_scr = await averageTutorialScore(id, token);

const user_id = decodeToken(token)['id'];

const user_banned = await checkUserBan(user_id, token);
---

<div class="tutorial-viewer">
    <h1 id={`tutorial-title-input-${id}`} class="tutorial-title">{tutorial ? tutorial.name : 'Cargando...'}</h1>
    <p id={`tutorial-description-input-${id}`} class="tutorial-description">{tutorial ? tutorial.description : 'Cargando...'}</p>
    {(show_details != "no") && (
        <div class="tutorial-meta">
            <span class="tutorial-meta-item">
                <i>üìÖ</i> Creado: {formatISODateAuto(tutorial.addDate)}
            </span>
            {(formatISODateAuto(tutorial.addDate) !== formatISODateAuto(tutorial.modDate)) ? <span class="tutorial-meta-item">
                <i>‚úèÔ∏è</i> Modificado: {formatISODateAuto(tutorial.modDate)}
            </span> : <></>}
            <span class="tutorial-meta-item">
                <i>üë§</i> {autor['nickname']}
            </span>
            <span class="tutorial-meta-item">
                <i>‚≠ê</i> {(avg_scr['score_count'] > 0) ? (
                    <>{formatFloat(avg_scr['average_score'])}‚òÖ ({avg_scr['score_count']} valoraciones)</>
                ) : (
                    <>Sin valoraciones a√∫n</>
                )}
            </span>
        </div>
    )}
    <div data-tutorial={id} style="display: none" id="tutorial-id"></div>
    <div data-details={show_details} style="display: none" id="details-id"></div>
    {(((user_id != autor['id']) && (show_details != "no")) && user_banned == false) ? <div class="rating-container" id={`rating-container`}>
        <select class="rating-select" id={`rating-select`}>
            <option value="" selected>Selecciona una puntuaci√≥n</option>
            <option value="1">1 ‚òÖ</option>
            <option value="2">2 ‚òÖ‚òÖ</option>
            <option value="3">3 ‚òÖ‚òÖ‚òÖ</option>
            <option value="4">4 ‚òÖ‚òÖ‚òÖ‚òÖ</option>
            <option value="5">5 ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</option>
        </select>
        <button class="rating-button" id={`rating-button`}>Puntuar</button>
    </div> : <></>}
    <div class="pages-container">
        <ul role="list" class="link-pages-grid" id={`pages-ul-${id}`}>
            {pages.map((pag, index) => (
                <li class="li-page" id={`page-${index + 1}`}>
                    <h2 class="input-page-title">{pag.title}</h2>
                    <p class="input-page-description">{pag.description}</p>
                    {pag.blocks && pag.blocks.map((block) => (
                        <div class="div-buttons">
                            {block.type === 'title' && <h3 class="item-block type-title">{block.content}</h3>}
                            {block.type === 'text' && <pre class="item-block type-text">{block.content}</pre>}
                            {block.type === 'code' && <code class="item-block type-code">{block.content}</code>}
                        </div>
                    ))}
                </li>
            ))}
        </ul>
    </div>
</div>

<script>
    import { getDecodedToken, getToken } from '@utils/getToken'
    import { newTutorialScore, getaTutorialScore, updateTutorialScore, checkUserBan } from '@api/useCases'
    import Swal from 'sweetalert2';

    document.addEventListener('DOMContentLoaded', async () => {
        let details_id = document.getElementById("details-id").dataset.details;
        const user_banned = await checkUserBan(getDecodedToken()['id'], getToken());

        // Si se deben mostrar los detalles del tutorial (no lo estamos visualizando en un curso) y el usuario no est√° baneado permite editar o guardar una valoraci√≥n del tutorial
        if (details_id != "no" && user_banned == false) {
            const select = document.getElementById(`rating-select`);
            const button = document.getElementById(`rating-button`);
            let tutorial_id = document.getElementById("tutorial-id").dataset.tutorial;
            const user_id = getDecodedToken()['id'];

            const token = getToken();

            // Obtenemos una puntuaci√≥n dada por este usuario en este tutorial si la hay
            const already_marked = await getaTutorialScore(tutorial_id, user_id.toString(), token);

            // Si existe no permite seleccionar otra a menos que le del al bot√≥n de editar, y puedes editar dicha puntuaci√≥n
            if(already_marked){
                select['disabled'] = true;
                button.textContent = 'Editar puntuaci√≥n';
                select['value'] = already_marked['score'];
                button.addEventListener('click', async () => {
                    select['disabled'] = false;
                    button.textContent = 'Enviar nueva puntuaci√≥n';
                    button.addEventListener('click', async () => {
                        Swal.fire({
                            title: '¬øSeguro?',
                            text: '¬øEst√°s seguro de querer actualizar la puntuaci√≥n?',
                            showDenyButton: true,
                            confirmButtonText: 'Si',
                            denyButtonText: 'No',
                        }).then(async (result) => {
                            if(result.isConfirmed) {
                                const score = select['value'];
                                await updateTutorialScore(tutorial_id, user_id.toString(), score, token);
                                Swal.fire({
                                    icon: 'success',
                                    title: '¬°Puntuaci√≥n guardada!',
                                    text: 'Recargando...',
                                    timer: 1000,
                                    willClose: () => {
                                        window.location.href = `/see-tutorial?id=${tutorial_id}`;  // Redirigir al tutorial
                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Puntuaci√≥n no guardada',
                                    text: 'Recargando...',
                                    timer: 1000,
                                    willClose: () => {
                                        window.location.href = `/see-tutorial?id=${tutorial_id}`;  // Redirigir al tutorial
                                    }
                                });
                            }
                        });
                    });
                })
            } else {
                // Crea una nueva puntuaci√≥n de este usuario a este tutorial si pulsas el bot√≥n de enviar
                button.addEventListener('click', async () => {
                    const score = select['value'];
                    button['disabled'] = true;
                    const tutorial_score_data = {
                        tutorial: `${parseInt(tutorial_id)}`,
                        user: `${user_id}`,
                        score: score,
                    }
                    try {
                        Swal.fire({
                            title: '¬øSeguro?',
                            text: '¬øEst√°s seguro de la puntuaci√≥n?',
                            showDenyButton: true,
                            confirmButtonText: 'Si',
                            denyButtonText: 'No',
                        }).then(async (result) => {
                            if(result.isConfirmed) {
                                await newTutorialScore(tutorial_score_data, token);
                                Swal.fire({
                                    icon: 'success',
                                    title: '¬°Puntuaci√≥n guardada!',
                                    text: 'Recargando...',
                                    timer: 1000,
                                    willClose: () => {
                                        window.location.href = `/see-tutorial?id=${tutorial_id}`;  // Redirigir al tutorial
                                    }
                                });
                            } else {
                                Swal.fire('Puntuaci√≥n no guardada');
                            }
                        });
                    } catch (error) {
                        Swal.fire('Puntuaci√≥n no guardada');
                    } finally {
                        button['disabled'] = false;
                    }
                });
            }
        }
    });
</script>